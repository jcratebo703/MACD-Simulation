import MACDParameterOptimization.{indexCloseMap, test, typeTwoCrashFile}

import scala.collection.mutable.ArrayBuffer
import scala.util.control.Breaks.break

/* Simulation start */


var Buf: Double = -1
var hold: Int = 0
val sellIndex = ArrayBuffer[Int]()
val buyIndex = ArrayBuffer[Int]()
val sellPrice = ArrayBuffer[Double]()
val buyPrice = ArrayBuffer[Double]()
val priceDif = ArrayBuffer[Double]()
val returnRate = ArrayBuffer[Double]()
var b, s: Int = 0

for(i <- 0 to macdAryBuf.size-2){
  val preHis =  difAryBuf(i) - macdAryBuf(i)
  val postHis = difAryBuf(i+1) - macdAryBuf(i+1)
  val close: Double = indexCloseMap.get(i+1+longestDay-1).toArray.mkString("").toDouble
  //var spend = asset * transRatio
  //var sellNumb = stockNum * transRatio

  if(preHis < 0 && postHis > 0){ //negative to positive, buy
    hold = 1
    Buf = close
    b += 1
    buyPrice += close
    //stockNum += spend / indexCloseMap.get(i).toArray.mkString("").toDouble
    //asset -= spend
    buyIndex += i+1
  }
  else if(preHis > 0 && postHis < 0){ //sell
    //asset += indexCloseMap.get(i).toArray.mkString("").toDouble * sellNumb
    //stockNum -= sellNumb
    if(hold == 1){
      s += 1
      sellIndex += i+1
      priceDif += Buf - close
      returnRate += (close-Buf)/Buf
      sellPrice += close

      hold = 0
      Buf = -1
    }
  }
}

if(sellIndex.size != buyIndex.size || sellIndex.size != returnRate.size){
  buyIndex.remove(buyIndex.size-1)
  buyPrice.remove(buyPrice.size-1)
  //println("\n error occur!!!!!")
}

if(buyIndex.size <= 0){
  typeTwoCrashFile += opIndex
  test += 1
  break()
}

println("count:" +buyIndex.size)
val firstBuy: Double = indexCloseMap.get(buyIndex(0)+longestDay-1).toArray.mkString("").toDouble
val lastSell: Double = indexCloseMap.get(sellIndex(sellIndex.size-1)+longestDay-1).toArray.mkString("").toDouble
val ERate = returnRate.sum/returnRate.size

val ERateAddOne = returnRate
ERateAddOne.transform(_+1)
var cumulativeRate: Double = 1
ERateAddOne.foreach(x => cumulativeRate *= x)
cumulativeRate -= 1

println("\n Sell Index: " + sellIndex + "\n Sell counts: " + sellIndex.size)
println("\n Buy Index: " + buyIndex + "\n Buy counts: " + buyIndex.size)
println("\n Sell Price: " + sellPrice)
println("\n Buy Price: " + buyPrice)
println("\n Rate of Return: " + returnRate)
println("\n Maximum: " + returnRate.max)
println("\n Minimum: " + returnRate.min)
println("\n Cumulative Return Rate: " + (lastSell-firstBuy)/firstBuy)
println("\n The Real Cumulative Return Rate: " + cumulativeRate)
println("\n Expectation of Return Rate: " + ERate)

println("\n b : " + b + "\n s : " + s)

println("\n Simulation complete")